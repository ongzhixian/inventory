@{
}

<!-- <canvas width=300 height=300 style="border:1px solid black;"></canvas> -->

<div style="text-align:center;">
    <svg width="960" height="500" style="border:1px solid black; margin-top: 80px;"></svg>
</div>


<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
var nodes = [
  { id: "mammal", label: "Mammals", level: 1 },
  { id: "dog"   , label: "Dogs"   , level: 2 },
  { id: "cat"   , label: "Cats"   , level: 2 },
  { id: "fox"   , label: "Foxes"  , level: 2 },
  { id: "elk"   , label: "Elk"    , level: 2 },
  { id: "insect", label: "Insects", level: 1 },
  { id: "ant"   , label: "Ants"   , level: 2 },
  { id: "bee"   , label: "Bees"   , level: 2 },
  { id: "beetle", label: "Beetles", level: 2 },
  { id: "fish"  , label: "Fish"   , level: 1 },
  { id: "carp"  , label: "Carp"   , level: 2 },
  { id: "pike"  , label: "Pikes"  , level: 2 }
  , { id: "programming_languages", label: "Programming languaes", level: 1 }

  , { id: "ecosystems", label: "Ecosystems", level: 1 }
  , { id: "dotnet"    , label: ".NET Framework"    , level: 1 }
  , { id: "csharp"    , label: "C#"    , level: 1 }
  , { id: "vbnet"    , label: "VB.NET"    , level: 1 }
  , { id: "fsharp"    , label: "F#"    , level: 1 }
]
var links = [
  { target: "programming_languages", source: "dotnet"  , strength: 0.07 },
  { target: "dotnet", source: "csharp"  , strength: 0.17 },
  { target: "dotnet", source: "vbnet"   , strength: 0.17 },
  { target: "dotnet", source: "fsharp"  , strength: 0.17 },

	{ target: "mammal", source: "dog" , strength: 0.7 },
	{ target: "mammal", source: "cat" , strength: 0.7 },
  { target: "mammal", source: "fox" , strength: 0.7 },
  { target: "mammal", source: "elk" , strength: 0.7 },

  { target: "insect", source: "ant" , strength: 0.7 },
  { target: "insect", source: "bee" , strength: 0.7 },
  { target: "fish"  , source: "carp", strength: 0.7 },
  { target: "fish"  , source: "pike", strength: 0.7 },
  { target: "cat"   , source: "elk" , strength: 0.1 },
  //{ target: "carp"  , source: "ant" , strength: 0.1 },
  //{ target: "elk"   , source: "bee" , strength: 0.1 },
  { target: "dog"   , source: "cat" , strength: 0.1 },
  //{ target: "fox"   , source: "ant" , strength: 0.009 },
	{ target: "pike"  , source: "cat" , strength: 0.1 }
]
function getNeighbors(node) {
  return links.reduce(function (neighbors, link) {
      if (link.target.id === node.id) {
        neighbors.push(link.source.id)
      } else if (link.source.id === node.id) {
        neighbors.push(link.target.id)
      }
      return neighbors
    },
    [node.id]
  )
}
function isNeighborLink(node, link) {
  return link.target.id === node.id || link.source.id === node.id
}
function getNodeColor(node, neighbors) {
  if (Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1) {
    return node.level === 1 ? 'blue' : 'green'
  }
  return node.level === 1 ? 'red' : 'gray'
}
function getLinkColor(node, link) {
  return isNeighborLink(node, link) ? 'green' : '#E5E5E5'
}
function getTextColor(node, neighbors) {
  return Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? 'green' : 'black'
}

var width = window.innerWidth - 128;
var height = window.innerHeight - 128;

var svg = d3.select('svg');
svg.attr('width', width).attr('height', height);

//Make the x-position equal to the x-position specified in the module positioning object or, if not in
//the hash, then set it to 250
var forceX = d3.forceX(function (d) {return modulePosition[d.module] ? modulePosition[d.module].x : 250})
    .strength(0.05)

//Same for forceY--these act as a gravity parameter so the different strength determines how closely
//the individual nodes are pulled to the center of their module position
var forceY = d3.forceY(function (d) {return modulePosition[d.module] ? modulePosition[d.module].y : 250})
    .strength(0.05)

// simulation setup with all forces
var linkForce = d3
  .forceLink()
  .id(function (link) { return link.id })
  .strength(function (link) { return link.strength })
var simulation = d3
  .forceSimulation()
  .force('link', linkForce)
  .force('charge', d3.forceManyBody().strength(-120))
  .force('center', d3.forceCenter(width / 2, height / 2))
  //.size([width, height])
  //.force("x", forceX)
  //.force("y", forceY)
var dragDrop = d3.drag().on('start', function (node) {
  node.fx = node.x
  node.fy = node.y
}).on('drag', function (node) {
  simulation.alphaTarget(0.7).restart()
  node.fx = d3.event.x
  node.fy = d3.event.y
}).on('end', function (node) {
  if (!d3.event.active) {
    simulation.alphaTarget(0)
  }
  node.fx = null
  node.fy = null
})
function selectNode(selectedNode) {
  var neighbors = getNeighbors(selectedNode);
  
  // we modify the styles to highlight selected nodes
  nodeElements.attr('fill', function (node) { return getNodeColor(node, neighbors) })
  textElements.attr('fill', function (node) { return getTextColor(node, neighbors) })
  linkElements.attr('stroke', function (link) { return getLinkColor(selectedNode, link) })
}
var linkElements = svg.append("g")
  .attr("class", "links")
  .selectAll("line")
  .data(links)
  .enter().append("line")
    .attr("stroke-width", 1)
	  .attr("stroke", "rgba(50, 50, 50, 0.2)")
var nodeElements = svg.append("g")
  .attr("class", "nodes")
  .selectAll("circle")
  .data(nodes)
  .enter().append("circle")
    .attr("r", function(node) { debugger; return 3; })
    .attr("fill", getNodeColor)
    .call(dragDrop)
    .on('click', selectNode)
var textElements = svg.append("g")
  .attr("class", "texts")
  .selectAll("text")
  .data(nodes)
  .enter().append("text")
    .text(function (node) { return  node.label })
	  .attr("font-size", 15)
	  .attr("dx", 15)
    .attr("dy", 4)

simulation.nodes(nodes).on('tick', () => {

  radius = 20;
  nodeElements
    .attr("cx", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
    .attr("cy", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });
    //.attr('cx', function (node) { return node.x })
    //.attr('cy', function (node) { return node.y })
  textElements
    .attr('x', function (node) { return node.x })
    .attr('y', function (node) { return node.y })
  linkElements
    .attr('x1', function (link) { return link.source.x })
    .attr('y1', function (link) { return link.source.y })
    .attr('x2', function (link) { return link.target.x })
    .attr('y2', function (link) { return link.target.y })
})
simulation.force("link").links(links)
</script>